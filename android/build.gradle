

android {
    buildToolsVersion '28.0.3'
    compileSdkVersion 28

    sourceSets {
        main {
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            manifest.srcFile 'AndroidManifest.xml'
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDir 'libs'
        }

        androidTest.setRoot('tests')
    }
    defaultConfig {
        versionCode 48
        minSdkVersion 16
        multiDexEnabled true
    }

    dexOptions {
        jumboMode true
    }

    productFlavors {
    }
}
// needed to add JNI shared libraries to APK when compiling on CLI
//tasks.withType(com.android.build.gradle.tasks.PackageApplication) { pkgTask ->
//    pkgTask.jniFolders = new HashSet<File>()
//    pkgTask.jniFolders.add(new File(projectDir, 'libs'))
//}
// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() {
    file("libs/armeabi/").mkdirs();
    file("libs/armeabi-v7a/").mkdirs();
    file("libs/x86/").mkdirs();
    file("libs/arm64-v8a/").mkdirs()
    file("libs/x86_64/").mkdirs()

    configurations.natives.files.each { jar ->
        def outputDir = null
        if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
        if (jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
        if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
        if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
        if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
        if (outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.so"
            }
        }
    }
}
repositories {
    maven {
        url 'https://maven.google.com'
    }
    jcenter()
}


task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.mygdx.game.android/com.mygdx.game.android.AndroidLauncher'
}

// sets up the Android Idea project, using the old Ant based build.
idea {
    module {
        sourceDirs += file("src");
        scopes = [COMPILE: [plus: [project.configurations.compile]]]

        iml {
            withXml {
                def node = it.asNode()
                def builder = NodeBuilder.newInstance();
                builder.current = node;
                builder.component(name: "FacetManager") {
                    facet(type: "android", name: "Android") {
                        configuration {
                            option(name: "UPDATE_PROPERTY_FILES", value: "true")
                        }
                    }
                }
            }
        }
    }
}
dependencies {
    compile 'com.google.android.gms:play-services-ads:18.1.1'
    compile 'com.google.firebase:firebase-core:17.0.1'
    compile 'com.crashlytics.sdk.android:crashlytics:2.10.1'
}

apply plugin: 'io.fabric'
apply plugin: 'com.google.gms.google-services'
